# -*- coding: utf-8 -*-
"""Clase_03_Modulos_y_Programas_Interactivos.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/github/bpoblete/CC1002/blob/master/Clases/Clase_03_Modulos_y_Programas_Interactivos.ipynb

#Clase 3: Módulos y Programas Interactivos
**(Capítulo 4 del Apunte)**

## Variables constantes

La variable **`pi`** se repite varias veces en el mismo programa y no cambia nunca. Las variables que son constantes se pueden definir como tales afuera de la función. (modificamos el código de arriba para comprobarlo.)

**Dar nombres relevantes a las constantes que serán utilizadas frecuentemente en su programa, utilizando estos nombres en lugar de hacer referencia a su valor**

Esto permite que el código sea más entendible y si hay que modificar el valor de la constante se hace una sola vez.

## Módulos

La programación usando módulos (programación modular) es una técnica de diseño que separa las funciones de un programa en módulos.
- Un módulo tiene una finalidad única y contienen todo lo necesario para llevar a cabo esa funcionalidad (código fuente, variables).
- Conceptualmente <mark>un módulo representa separación de intereses</mark>.
- Mejoran la mantenibilidad de un software.

###Ejemplo:
Módulo [triangulo.py](https://colab.research.google.com/github/bpoblete/CC1002/blob/master/Clases/Clase_03_modulos/triangulo.py) (debemos crearlo en un archivo aparte con el nombre del modulo+".py")

Luego, para utilizar cualquiera de las funciones del módulo desde otros programas debemos decir:

```python
import triangulo
```
o
```python
from triangulo import *
```

esto importa todas las funciones del módulo, o alternativamente:

```python
from triangulo import nombre_funcion
```

esto importa solo la función especificada por `nombre_funcion`, que puede ser cualquier funcion definida en `triangulo.py`


---
"""

from triangulo import *
perimetro(2,3,2)

"""## Módulos que vienen con python

### math.py
"""

import math
# help(math)
# help muestra la documentacion, esta comentado para imprimir el pdf

math.pi

math.pow(10,10)

math.sqrt(25)

math.trunc(math.pi)

help(math) # ejecutar y ver lo que pasa (muestra el manual con funciones de math)

"""### Ejemplo de uso:"""

import math
grados = 90
radianes = math.pi*grados/180
seno = math.sin(radianes)
seno

coseno = math.cos(radianes)
coseno

"""### random.py"""

import random

random.random() #float al azar entre 0 y 1

random.randint(2,7) #int al azar entre a y b

"""## Otras funciones que vienen incluidas en python (no se importan con módulos vienen por defecto)"""

abs(-1)

max(3,4,2)

min(2,0)

"""### Ejemplo usando random y funciones incluidas en python"""

#mayor y menor de 3 enteros al azar entre 1 y 100
import random 
a=random.randint(1,100) 
b=random.randint(1,100) 
c=random.randint(1,100) 
print ("mayor=",max(a,b,c)) 
print ("menor=",min(a,b,c))

"""### Propuestos 

Escribir las siguientes funciones: 
- `azar(x,y)` entrega entero al azar entre x e y  
- `medio(x,y,z)` entrega el valor del medio entre x,y,z 
- `mayor(x,y)` entrega el mayor entre x e y (sin usar max)

***



# Programas interactivos

Muchas veces un programa necesita interactuar con el usuario (cuando el usuario debe dar parámetros) y luego el programa tiene que mostrar resultados.

- **`input`** permite pedir datos al usuario
  - **`input`**: la variable ingresada será del texto
- **`print()`**, permite imprimir a pantalla
Ej:
"""

input('Ingrese un numero ')

numero = int(input('Ingrese un numero '))

numero

doble = numero * 2
doble

nombre = input('Cual es su nombre?')

nombre

"""## Programa interactivo usando triangulo.py

(debe estar guardado todo en el mismo directorio y ser ejecutado desde ahí)

**Ejercicio en clases (5 min)**
"""

# completar