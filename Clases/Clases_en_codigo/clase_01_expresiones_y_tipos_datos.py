# -*- coding: utf-8 -*-
"""Clase_01_Expresiones_y_Tipos_Datos.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/github/bpoblete/CC1002/blob/master/Clases/Clase_01_Expresiones_y_Tipos_Datos.ipynb

# Clase 1: Expresiones y Tipos de Datos Básicos


## Objetivos del curso

- Base de razonamiento lógico y algorítmico.
- Modelamiento y abstracción.
- Importante para resolver problemas!


## ¿Qué es un algoritmo?

Un algoritmo es una secuencia finita de pasos que permiten ejecutar cualquier tarea (como por ejemplo, hacer un huevo frito). La palabra algoritmo viene de la transcripción latina del nombre de _Abu Abdallah Muhammad ibn Musa al-Khwarizmi_, un famoso matemático, astrónomo y geógrafo persa del siglo IX, padre del álgebra y quien introdujo el concepto matemático de algoritmo.


### Ejemplo "cocinar un huevo frito".

- Problema?
- Elementos?

- Pasos de ejecución (romper el problema en unidades básicas):

1. Encender un `fósforo`
2. Con el `fósforo`, prender un quemador de la `cocina`
3. Colocar la `sartén` sobre el quemador de la `cocina`
4. Poner unas gotas de `aceite` sobre la `sartén`
5. Tomar un `huevo` y quebrarlo
6. Colocar el huevo quebrado sobre la `sartén`
7. Esperar hasta que el `huevo` esté listo

## ¿Qué es un programa?

- Especificación ejecutable de un algoritmo.
- Para representar un programa en un computador utilizamos un lenguaje de programación (Python)
- Comenzaremos a trabajar con su interprete: lee las expresiones, las evalua e imprime su resultado.
- Python es una herramienta no es un fin, el objetivo es aprender a resolver problemas.

***


# Programas simples


## Tipos de datos básicos

Indica al computador las características de los datos con los que va a trabajar. Esto incluye imponer restricciones sobre los datos, tales como qué valores puede tomar o qué operaciones se pueden realizar sobre éste. Todos los valores en un programa tienen un tipo.

**Enteros (int)**:
`-1, -2, -3,.., 0, 1, 2, ..`

**Reales (float)**:
`0.3456`, cualquier número con punto decimal.

**Texto (str)**:
`'hola'`, `"Mi mascota es un ñandú"`, `'123'` etc.

## Evaluación de expresiones

Con los tipos de datos explicados anteriormente, podemos realizar operaciones entre ellos utilizando operadores específicos en cada caso. Así, para datos numéricos (enteros y reales), podemos usar los operadores de suma (`+`), resta (`-`), multiplicación (`*`) y división (`/`). Las prioridades de los operadores es la misma usada en álgebra
"""

3+5

3+2*5

(3 + 2) * 5

"""Operador de potencia (`**`):"""

2 ** 3

4**0.5

"""Y calcular el resto de una división entera (`%`):"""

10%3

"""Operaciones con texto, concatenación (unir o sumar '`+`') y repetir '`*`':"""

'abra' +    'cadabra'

'ja'*3

"""En muchos lenguajes de programación el tipo de dato del resultado de evaluar una expresión dependerá de los operandos. Por ejemplo, en el caso del operador `+` (suma), si la expresión está compuesta por enteros el resultado también será  entero:"""

1+2

1.0+2.0

1+2.0

1.0+2

"""El único operador que no sigue la regla anterior es '`/`' (división), que siempre produce números flotantes:"""

1/2

"""Si quiero que la división entregue sólo la parte entera del resultado debo usar el operador '`//`' (división entera):"""

1//2

1.0//2.0

"""Finalmente, si queremos juntar valores de tipo texto con valores de tipo numérico, debemos convertir estos últimos previamente a valores de tipo texto. Por ejemplo, si queremos transformar un valor **`n`** a un valor equivalente de tipo texto, utilizamos la función de Python **`str`**. De igual manera, si tenemos un valor de tipo texto que se puede entender como número, por ejemplo '103', podemos convertir el valor en tipo numérico usando las funciones int y float. Así:"""

'En el curso hay '+ str(30) +' alumnos'

'100'+'1'

int('100') + 1

"""# Variables

Sirven para guardar resultados de evaluaciones de expresiones.
"""

a = 8 # la variable a contiene el valor 8

b = 12 # la variable b contiene el valor 12

a # mostramos el valor de a

a+b # creamos una expresión y mostramos su valor

c = a + 2 * b # creamos una expresión, se evalúa y se define c con su valor

c # mostramos el valor de c

a = 10 # redefinimos a

a + b

c # el valor no cambia ya que lo cambiamos antes de la re-definición de a

"""**\#** sirve para introducir comentarios

# Usar nombres descriptivos para las variables

Mal ejemplo:
"""

a = 8
b = 12
c = a * b

"""Mejor:"""

ancho = 8
largo = 12
area = ancho*largo
area

dia='12'; mes='marzo'; agno='2018'
hoy = dia +' de '+ mes + ' de '+ agno
hoy

"""# Errores


Errores de tipo
"""

dia = 13
mes = 'marzo'
'Hoy es ' + dia + ' de ' + mes

dia = 13
mes = 'marzo'
'Hoy es ' + str(dia) + ' de ' + mes

"""Errores de indentación"""

x = 3
    x

"""Errores de sintaxis"""

numero = 15
antecesor = (numero - 1))

"""Errores de nombre"""

lado1 = 15
area = lado1/lado2

"""# Ejercicio 1: 
<mark>Ahora que revisaste todo el material ¡No olvides realizar el **Ejercicio 1 publicado en la sección Tareas de [U-Cursos](https://www.u-cursos.cl/)**!</mark>
"""